generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  main_image  String
  description String
  open_time   String
  close_time  String
  images      String[]
  slug        String   @unique
  price       PRICE
  location_id Int
  cuisine_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  items       Item[]
  cuisine     Cuisine  @relation(fields: [cuisine_id], references: [id])
  location    Location @relation(fields: [location_id], references: [id])
  reviews     Review[]
  bookings    Booking[]
  tables      Table[]
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  description   String
  restaurant_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  price         String
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  restaurants Restaurant[]
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now())
  restaurants Restaurant[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Float
  restaurant_id Int
  user_id       Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  city       String
  email      String   @unique
  password   String
  phone      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  reviews    Review[]
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}

model Table {
  id               Int      @id @default(autoincrement())
  seats            Int
  restaurant_id    Int
  restaurant       Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  bookings BookingsOnTables[]
}

model Booking {
  id                Int      @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_ocasion    String?
  booker_request    String?
  restaurant_id     Int
  restaurant        Restaurant @relation(fields: [restaurant_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  tables BookingsOnTables[]
}

model BookingsOnTables {
  booking_id  Int
  booking     Booking @relation(fields: [booking_id], references: [id])
  table_id    Int
  table       Table @relation(fields: [table_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([booking_id, table_id])

}